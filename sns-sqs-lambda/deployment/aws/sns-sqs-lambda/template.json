{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "SNS Trigger SQS => (Lambda)",
  "Parameters": {
    "SNSTopicName": {
      "Default": "test-sns-topic",
      "Description": "SNS Topic Name",
      "Type": "String"
    },
    "SQSQueueName": {
      "Default": "test-sns-queue",
      "Description": "SQS Queue Name",
      "Type": "String"
    },
    "SQSDeadLetterQueueName": {
      "Default": "test-sns-dead-letter-queue",
      "Description": "SQS Dead Letter Queue Name",
      "Type": "String"
    },
    "QueuePrincipal": {
      "Default": "arn:aws:iam::522497821161:root",
      "Description": "Queue Principal",
      "Type": "String"
    },
    "LambdaName": {
      "Default": "test-sns-lambda",
      "Description": "Lambda Function Name",
      "Type": "String"
    },
    "AppEnv": {
      "Default": "test",
      "Description": "Application Environment.",
      "Type": "String"
    },
    "VpcId": {
      "Default": "",
      "Description": "VPC ID",
      "Type": "String"
    },
    "SubnetId1": {
      "Default": "",
      "Description": "Subnet id 1",
      "Type": "String"
    },
    "SubnetId2": {
      "Default": "",
      "Description": "Subnet id 2",
      "Type": "String"
    },
    "AlarmEndpoint": {
      "Default": "https://events.pagerduty.com/integration/dev/null",
      "Description": "Endpoint of Alarm SNS topic",
      "Type": "String"
    }
  },
  "Resources": {
    "TestSNSTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "TopicName": {
          "Ref": "SNSTopicName"
        }
      }
    },
    "TestQueue": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": {
          "Ref": "SQSQueueName"
        },
        "RedrivePolicy": {
          "deadLetterTargetArn": {
            "Fn::GetAtt": [
              "TestDeadLetterQueue",
              "Arn"
            ]
          },
          "maxReceiveCount": 4
        },
        "VisibilityTimeout": 300
      }
    },
    "TestDeadLetterQueue": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": {
          "Ref": "SQSDeadLetterQueueName"
        },
        "MessageRetentionPeriod": 1209600
      }
    },
    "TestSNSSubscription": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "Endpoint": {
          "Fn::GetAtt": [
            "TestQueue",
            "Arn"
          ]
        },
        "Protocol": "sqs",
        "Region": "ap-southeast-2",
        "TopicArn": {
          "Ref": "TestSNSTopic"
        }
      }
    },
    "TestQueuePermission": {
      "Type": "AWS::SQS::QueuePolicy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Ref": "QueuePrincipal"
                }
              },
              "Action": "SQS:*",
              "Resource": {
                "Fn::GetAtt": [
                  "TestQueue",
                  "Arn"
                ]
              }
            },
            {
              "Effect": "Allow",
              "Principal": "*",
              "Action": "SQS:SendMessage",
              "Condition": {
                "ArnEquals": {
                  "aws:SourceArn": {
                    "Ref": "TestSNSTopic"
                  }
                }
              },
              "Resource": {
                "Fn::GetAtt": [
                  "TestQueue",
                  "Arn"
                ]
              }
            }
          ]
        },
        "Queues": [
          {
            "Ref": "TestQueue"
          }
        ]
      }
    },
    "LambdaSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Limits security group egress traffic",
        "VpcId": {
          "Ref": "VpcId"
        }
      }
    },
    "TestLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": "../../../dist/",
        "FunctionName": {
          "Ref": "LambdaName"
        },
        "Description": "Test Lambda Function Name",
        "Environment": {
          "Variables": {
            "NODE_ENV": "production",
            "APP_ENV": {
              "Ref": "AppEnv"
            }
          }
        },
        "Handler": "index.handler",
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Ref": "LambdaSecurityGroup"
            }
          ],
          "SubnetIds": [
            {
              "Ref": "SubnetId1"
            },
            {
              "Ref": "SubnetId2"
            }
          ]
        },
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "LambdaRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": "300",
        "Tags": [
          {
            "Key": "contact",
            "Value": "Josaber"
          },
          {
            "Key": "name",
            "Value": "test-sns-sqs-lambda"
          }
        ]
      }
    },
    "LambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "LambdaPolicy",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:*"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:CreateNetworkInterface",
                    "ec2:DescribeNetworkInterfaces",
                    "ec2:DeleteNetworkInterface"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes"
                  ],
                  "Resource": {
                    "Fn::GetAtt": [
                      "TestQueue",
                      "Arn"
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "LambdaLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "DependsOn": "TestLambda",
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "/",
            [
              "/aws/lambda",
              {
                "Ref": "TestLambda"
              }
            ]
          ]
        },
        "RetentionInDays": 30
      }
    },
    "EventSourceMapping": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "Properties": {
        "EventSourceArn": {
          "Fn::GetAtt": [
            "TestQueue",
            "Arn"
          ]
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "TestLambda",
            "Arn"
          ]
        },
        "BatchSize": 1
      }
    },
    "AlarmTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [
          {
            "Endpoint": {
              "Ref": "AlarmEndpoint"
            },
            "Protocol": "https"
          }
        ]
      }
    },
    "QueueDepthAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Alarm if queue depth grows beyond 1 message",
        "Namespace": "AWS/SQS",
        "MetricName": "ApproximateNumberOfMessagesVisible",
        "Dimensions": [
          {
            "Name": "QueueName",
            "Value": {
              "Fn::GetAtt": [
                "TestDeadLetterQueue",
                "QueueName"
              ]
            }
          }
        ],
        "Statistic": "Average",
        "Period": "60",
        "EvaluationPeriods": "1",
        "Threshold": "0",
        "ComparisonOperator": "GreaterThanThreshold",
        "OKActions": [
          {
            "Ref": "AlarmTopic"
          }
        ],
        "AlarmActions": [
          {
            "Ref": "AlarmTopic"
          }
        ]
      }
    }
  }
}
